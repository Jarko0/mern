{"ast":null,"code":"// import { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n\n// function Books() {\n//   const [books, setBooks] = useState([]);\n//   const token = localStorage.getItem(\"token\");\n\n//   const fetchBooks = async () => {\n//     try {\n//       const res = await axios.get(\"http://localhost:8080/api/library\", {\n//         headers: { \"x-access-token\": token },\n//       });\n//       setBooks(res.data.data);\n//     } catch (error) {\n//       console.error(\"Błąd pobierania książek:\", error);\n//     }\n//   };\n\n//   const markAsRead = async (bookId) => {\n//     try {\n//       await axios.post(\n//         `http://localhost:8080/api/library/read/${bookId}`,\n//         {},\n//         { headers: { \"x-access-token\": token } }\n//       );\n//       alert(\"Dodano do listy przeczytanych książek!\");\n//     } catch (error) {\n//       console.error(\"Błąd dodawania do przeczytanych:\", error.response?.data || error.message);\n//       alert(`Nie udało się dodać do przeczytanych: ${error.response?.data?.message || error.message}`);\n//     }\n//   };\n\n//   const deleteBook = async (bookId) => {\n//     try {\n//       await axios.delete(`http://localhost:8080/api/library/${bookId}`, {\n//         headers: { \"x-access-token\": token },\n//       });\n//       alert(\"Książka została usunięta.\");\n//       fetchBooks();\n//     } catch (error) {\n//       console.error(\"Błąd usuwania książki:\", error.response?.data || error.message);\n//       alert(`Nie udało się usunąć książki: ${error.response?.data?.message || error.message}`);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchBooks();\n//   }, []);\n\n//   return (\n//     <div className=\"books-container\">\n//       <h2>Książki</h2>\n//       <div className=\"books-list\">\n//         {books.map((book) => (\n//           <div className=\"book-card\" key={book._id}>\n//             <h3 className=\"book-title\">{book.title}</h3>\n//             <p className=\"book-author\"><em>{book.author}</em></p>\n//             {book.year && <p className=\"book-year\">Rok wydania: {book.year}</p>}\n//             {book.description && <p className=\"book-description\">{book.description}</p>}\n//             <button className=\"read-button\" onClick={() => markAsRead(book._id)}>\n//               Dodaj do przeczytanych\n//             </button>\n//             <button className=\"delete-button\" onClick={() => deleteBook(book._id)}>\n//               Usuń książkę\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Books;","map":{"version":3,"names":[],"sources":["C:/Users/kubaj/Desktop/react-mern/klient/src/components/Main/Books.jsx"],"sourcesContent":["// import { useEffect, useState } from \"react\";\r\n// import axios from \"axios\";\r\n\r\n// function Books() {\r\n//   const [books, setBooks] = useState([]);\r\n//   const token = localStorage.getItem(\"token\");\r\n\r\n//   const fetchBooks = async () => {\r\n//     try {\r\n//       const res = await axios.get(\"http://localhost:8080/api/library\", {\r\n//         headers: { \"x-access-token\": token },\r\n//       });\r\n//       setBooks(res.data.data);\r\n//     } catch (error) {\r\n//       console.error(\"Błąd pobierania książek:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const markAsRead = async (bookId) => {\r\n//     try {\r\n//       await axios.post(\r\n//         `http://localhost:8080/api/library/read/${bookId}`,\r\n//         {},\r\n//         { headers: { \"x-access-token\": token } }\r\n//       );\r\n//       alert(\"Dodano do listy przeczytanych książek!\");\r\n//     } catch (error) {\r\n//       console.error(\"Błąd dodawania do przeczytanych:\", error.response?.data || error.message);\r\n//       alert(`Nie udało się dodać do przeczytanych: ${error.response?.data?.message || error.message}`);\r\n//     }\r\n//   };\r\n\r\n//   const deleteBook = async (bookId) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:8080/api/library/${bookId}`, {\r\n//         headers: { \"x-access-token\": token },\r\n//       });\r\n//       alert(\"Książka została usunięta.\");\r\n//       fetchBooks();\r\n//     } catch (error) {\r\n//       console.error(\"Błąd usuwania książki:\", error.response?.data || error.message);\r\n//       alert(`Nie udało się usunąć książki: ${error.response?.data?.message || error.message}`);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchBooks();\r\n//   }, []);\r\n\r\n//   return (\r\n//     <div className=\"books-container\">\r\n//       <h2>Książki</h2>\r\n//       <div className=\"books-list\">\r\n//         {books.map((book) => (\r\n//           <div className=\"book-card\" key={book._id}>\r\n//             <h3 className=\"book-title\">{book.title}</h3>\r\n//             <p className=\"book-author\"><em>{book.author}</em></p>\r\n//             {book.year && <p className=\"book-year\">Rok wydania: {book.year}</p>}\r\n//             {book.description && <p className=\"book-description\">{book.description}</p>}\r\n//             <button className=\"read-button\" onClick={() => markAsRead(book._id)}>\r\n//               Dodaj do przeczytanych\r\n//             </button>\r\n//             <button className=\"delete-button\" onClick={() => deleteBook(book._id)}>\r\n//               Usuń książkę\r\n//             </button>\r\n//           </div>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Books;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}